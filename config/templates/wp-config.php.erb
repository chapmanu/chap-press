<?php
/**
 * The base configuration for WordPress
 *
 * The wp-config.php creation script uses this file during the
 * installation. You don't have to use the web site, you can
 * copy this file to "wp-config.php" and fill in the values.
 *
 * This file contains the following configurations:
 *
 * * MySQL settings
 * * Secret keys
 * * Database table prefix
 * * ABSPATH
 *
 * @link https://codex.wordpress.org/Editing_wp-config.php
 *
 * @package WordPress
 */


/******************** ChapPress - MySQL settings **************************/

/** These database values are only to be used for local environment 
 *  development for the ChapPress project.
 */

define('DB_NAME',     '<%= database['database'] %>');
define('DB_USER',     '<%= database['username'] %>');
define('DB_PASSWORD', '<%= database['password'] %>');
define('DB_HOST',     '<%= database['host'] %>');
define('DB_CHARSET', 'utf8');
define('DB_COLLATE', '');

/**#@+
 * Authentication Unique Keys and Salts.
 *
 * ChapPress- DEVELOPER notice - These values need to be updated before release to production for the Chappress project.
 * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
 * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
 *
 * @since 2.6.0
 */
define('AUTH_KEY',         'put your unique phrase here');
define('SECURE_AUTH_KEY',  'put your unique phrase here');
define('LOGGED_IN_KEY',    'put your unique phrase here');
define('NONCE_KEY',        'put your unique phrase here');
define('AUTH_SALT',        'put your unique phrase here');
define('SECURE_AUTH_SALT', 'put your unique phrase here');
define('LOGGED_IN_SALT',   'put your unique phrase here');
define('NONCE_SALT',       'put your unique phrase here');

/**#@-*/

/**
 * WordPress Database Table prefix.
 *
 * You can have multiple installations in one database if you give each
 * a unique prefix. Only numbers, letters, and underscores please!
 */
$table_prefix  = 'wp_';

/******************** Debug **************************/

/* For developers working in WordPress debugging mode.
 *
 * When WP_DEBUG_LOG is set to true, Wonolog will log everything.
 *
 * Change this to true to enable the display of notices during development.
 * It is strongly recommended that plugin and theme developers use WP_DEBUG
 * in their development environments.
 *
 * For information on other constants that can be used for debugging,
 * visit the Codex.
 *
 * @link https://codex.wordpress.org/Debugging_in_WordPress
 */
define( 'WP_DEBUG', true );
/* Log is saved to the directory: /wp-content/debug.log */
define( 'WP_DEBUG_LOG', true );
define( 'WP_DEBUG_DISPLAY', false );
@ini_set( 'display_errors', 0 );
define( 'SCRIPT_DEBUG', true );

/************************** WONOLOG **********************************/

/* Monolog-based logging package for WordPress. Not to be used for the live site.      
 * https://github.com/inpsyde/Wonolog
 * log path: public/wp-content/wonolog


 * Ensure Composer autoload is loaded in wp-config.php 
 * or anytime before the 'muplugins_loaded' action is fired
 */

//require '/var/www/html/current/vendor/autoload.php';

/*********************************************************************/

/* That's all, stop editing! Happy blogging. */

/** Absolute path to the WordPress directory. */
if ( !defined('ABSPATH') )
  define('ABSPATH', dirname(__FILE__) . '/');

/** Sets up WordPress vars and included files. */
require_once(ABSPATH . 'wp-settings.php');


/************************** Custom Log ***********************************/
/* Logging in Wonolog is done via a WordPress function: do_action()
 * The main hook to use for the scope is 'wonolog.log'.
 * A bare-minimum example of logging with Wonolog could look like so:
 */

//do_action( 'wonolog.log', 'Some event happened in wp-config.php' );
