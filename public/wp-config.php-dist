<?php

######### IMPORTANT #########
#
# Config file for the ChapPress project.
# This version of the file is used only in local development.
#
# https://github.com/chapmanu/chap-press
#
#############################


#############################
# Database Configuration
############################# 
# Please review the values and update if necessary.
 
$table_prefix  = 'wp_';

if ($_SERVER[SERVER_PORT] == 8222) {
  # Default DB
  define('DB_NAME', 'chappress_dev');
} else if ($_SERVER[SERVER_PORT] == 8777) {
  # DB for Acceptance testing
  define('DB_NAME', 'chappress_test');
} else {
  # Redirects here for the Functional Tests
  define('DB_NAME', 'chappress_test');
}

define('DB_USER',     'chappress');
define('DB_PASSWORD', 'chappress');
define('DB_HOST',     'localhost');
define('DB_CHARSET',  'utf8');
define('DB_COLLATE',  '');

#############################
# Authentication Keys and Salts
#############################
# For ChapPress developers: These values need to be updated before release to production for the Chappress
# project.
# You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}

define('AUTH_KEY',         'put your unique phrase here');
define('SECURE_AUTH_KEY',  'put your unique phrase here');
define('LOGGED_IN_KEY',    'put your unique phrase here');
define('NONCE_KEY',        'put your unique phrase here');
define('AUTH_SALT',        'put your unique phrase here');
define('SECURE_AUTH_SALT', 'put your unique phrase here');
define('LOGGED_IN_SALT',   'put your unique phrase here');
define('NONCE_SALT',       'put your unique phrase here');


#############################
# Debug
#############################
# For developers working in WordPress debugging mode.
# When WP_DEBUG_LOG is set to true, Wonolog will log everything.

define( 'WP_DEBUG', true );
define( 'WP_DEBUG_LOG', true );
define( 'WP_DEBUG_DISPLAY', false );
@ini_set( 'display_errors', 0 );
define( 'SCRIPT_DEBUG', true );

#############################
# Logging 
#############################
# Wonolog is a monolog-based logging package for WordPress. Not to be used for the live site.      
# https://github.com/inpsyde/Wonolog
# 
# Log path: public/wp-content/wonolog
#  
# Ensure Composer autoload is loaded in wp-config.php 
# or anytime before the 'muplugins_loaded' action is fired

# Path file location for the current Capistrano release
$autoload_path = __DIR__ . '/../vendor/autoload.php';

if (file_exists($autoload_path)) {
  require $autoload_path;
}

#############################
# PATHS AND URLS
#############################

# Absolute path to the WordPress directory. */
if ( !defined('ABSPATH') ) define('ABSPATH', dirname(__FILE__) . '/');

# Sets up WordPress vars and included files. */
require_once(ABSPATH . 'wp-settings.php');

#############################
# Custom Log
#############################
# Logging in Wonolog is done via a WordPress function: do_action()
# The main hook to use for the scope is 'wonolog.log'.
# See the docs: https://github.com/inpsyde/Wonolog/tree/master/docs
#
# A bare-minimum example of logging with Wonolog could look like so:

do_action( 'wonolog.log', 'Some event happened in wp-config.php' );